const { PermissionsBitField, EmbedBuilder, ButtonStyle, Client, GatewayIntentBits, ChannelType, Partials, ActionRowBuilder, SelectMenuBuilder, ModalBuilder, TextInputBuilder, TextInputStyle, InteractionType, SelectMenuInteraction, ButtonBuilder } = require("discord.js");
const INTENTS = Object.values(GatewayIntentBits);
const PARTIALS = Object.values(Partials);
const Discord = require("discord.js")
const louritydb = require("croxydb")
const client = new Client({
    intents: INTENTS,
    allowedMentions: {
        parse: ["users"]
    },
    partials: PARTIALS,
    retryLimit: 3
});
// Mercy Code geli≈ümi≈ü uptime botu :)
global.client = client;
client.commands = (global.commands = []);

const { readdirSync } = require("fs")
const { TOKEN } = require("./config.json");
readdirSync('./commands').forEach(f => {
    if (!f.endsWith(".js")) return;

    const props = require(`./commands/${f}`);

    client.commands.push({
        name: props.name.toLowerCase(),
        description: props.description,
        options: props.options,
        dm_permission: false,
        type: 1
    });

    console.log(`[COMMAND] ${props.name} komutu y√ºklendi.`)

});
readdirSync('./events').forEach(e => {

    const eve = require(`./events/${e}`);
    const name = e.split(".")[0];

    client.on(name, (...args) => {
        eve(client, ...args)
    });
    console.log(`[EVENT] ${name} eventi y√ºklendi.`)
});


client.login(TOKEN)

// Uptime Modal
const lourityModal = new ModalBuilder()
    .setCustomId('form')
    .setTitle('Link Ekle')
const u2 = new TextInputBuilder()
    .setCustomId('link')
    .setLabel('Proje Linkinizi Giriniz')
    .setStyle(TextInputStyle.Paragraph)
    .setMinLength(8)
    .setMaxLength(200)
    .setPlaceholder('https://sizin-linkiniz.glitch.me')
    .setRequired(true)

const row1 = new ActionRowBuilder().addComponents(u2);
lourityModal.addComponents(row1);


const lourityModal2 = new ModalBuilder()
    .setCustomId('form2')
    .setTitle('Link Sil')
const u3 = new TextInputBuilder()
    .setCustomId('baslik1')
    .setLabel('Proje Linkini Giriniz')
    .setStyle(TextInputStyle.Paragraph)
    .setMinLength(8)
    .setMaxLength(200)
    .setPlaceholder('https://sizin-linkiniz.glitch.me')
    .setRequired(true)

const row2 = new ActionRowBuilder().addComponents(u3);
lourityModal2.addComponents(row2);

// Uptime Kanala G√∂nderme
client.on('interactionCreate', async interaction => {

    if (interaction.commandName === "uptime-ayarla") {

        const row = new Discord.ActionRowBuilder()

            .addComponents(
                new Discord.ButtonBuilder()
                    .setLabel("Ekle")
                    .setStyle(Discord.ButtonStyle.Success)
                    .setCustomId("ekle")
            )
            .addComponents(
                new Discord.ButtonBuilder()
                    .setLabel("Sil")
                    .setStyle(Discord.ButtonStyle.Danger)
                    .setCustomId("sil")
            )
            .addComponents(
                new Discord.ButtonBuilder()
                    .setLabel("Linklerim")
                    .setStyle(Discord.ButtonStyle.Primary)
                    .setCustomId("linklerim")
            )

        const server = interaction.guild
        let sistem = louritydb.get(`uptimeSistemi_${interaction.guild.id}`)
        if (!sistem) return;
        let channel = sistem.kanal

        const uptimeMesaj = new Discord.EmbedBuilder()
            .setColor("#4e6bf2")
            .setTitle("POWER UPTƒ∞ME")
            .setDescription("***‚û≠Hey! Sen Botunu Kaliteli ve G√ºvenli Bir Yerde Uptime'mi Etmek ƒ∞stiyorsun O Zaman S√∂yleyeceklerimi Uygula!*** \n\n ‚úåÔ∏è ¬ª ***Botunu Uptime Etmek ƒ∞√ßin `Ekle` Butonuna Basabilirsin, Merak Etme Nasƒ±l Yapƒ±ldƒ±ƒüƒ±nƒ± Butona Bastƒ±ƒüƒ±nda G√∂receksin  \n\n ‚ù§Ô∏è ¬ª Uptime Edilen Botlarƒ±nƒ±n Sayƒ±sƒ±nƒ± G√∂rmek ƒ∞√ßin `Linklerim` Butonuna Tƒ±klayabilirsin \n\n üö´ ¬ª Eƒüer Botunu Uptimeden Kaldƒ±rmak ƒ∞stiyorsan `Sil` Butonuna Tƒ±klayabilirsin  ***")
            .setThumbnail(server.iconURL({ dynamic: true }))
            .setImage("https://discord.com/channels/1015180808111280168/1033634451227422770/1086579331507163216")
            .setFooter({ text: "Bu Hizmet POWER Uptime Tarafƒ±ndan Saƒülanmaktadƒ±r" })
       
              interaction.guild.channels.cache.get(channel).send({ embeds: [uptimeMesaj], components: [row] })

    }

})

// Uptime Ekle
client.on('interactionCreate', async interaction => {
    if (interaction.customId === "ekle") {

        await interaction.showModal(lourityModal);
    }
})

client.on('interactionCreate', async interaction => {
    if (interaction.type !== InteractionType.ModalSubmit) return;
    if (interaction.customId === 'form') {

        if (!louritydb.fetch(`uptimeLinks_${interaction.user.id}`)) {
            louritydb.set(`uptimeLinks_${interaction.user.id}`, [])
        }

        const link = interaction.fields.getTextInputValue("link")

        let link2 = louritydb.fetch(`uptimeLinks_${interaction.user.id}`, [])

        let sistem = louritydb.get(`uptimeSistemi_${interaction.guild.id}`)
        if (!sistem) return;
        let ozelrol = sistem.rol
        let log = sistem.log
        if (!log) return;
        var logChannel = client.channels.cache.get(log)

        if (!link) return;

        if (!interaction.member.roles.cache.has(ozelrol)) {
            if (louritydb.fetch(`uptimeLinks_${interaction.user.id}`).length >= 3) {
                return interaction.reply({
                    content: "En fazla 3 link ekleyebilirsin!",
                    ephemeral: true
                }).catch(e => { })
            }
        }
        // Lƒ∞Mƒ∞T AYARLARI BURADAN YAPILIR
        if (interaction.member.roles.cache.has(ozelrol)) {
            if (louritydb.fetch(`uptimeLinks_${interaction.user.id}`).length >= 10) {
                return interaction.reply({
                    content: "En fazla 10 link ekleyebilirsin!",
                    ephemeral: true
                }).catch(e => { })
            }
        }

        if (link2.includes(link)) {
            return interaction.reply({
                content: "Bu link zaten sistemde mevcut!",
                ephemeral: true
            }).catch(e => { })
        }

        if (!link.startsWith("https://")) {
            return interaction.reply({
                content: "Uptime linkin hatalƒ±, l√ºtfen ba≈üƒ±nda `https://` olduƒüundan emin ol!",
                ephemeral: true
            }).catch(e => { })
        }

        if (!link.endsWith(".glitch.me")) {
            return interaction.reply({
                content: "Uptime linkin hatalƒ±, l√ºtfen sonunda `.glitch.me` olduƒüundan emin ol!",
                ephemeral: true
            }).catch(e => { })
        }

        if (link.includes("uptime")) {

            const logEmbed = new EmbedBuilder()
                .setColor("Red")
                .setDescription(`<@${interaction.user.id}> adlƒ± kullanƒ±cƒ± sisteme **uptime botu** eklemeye √ßalƒ±≈ütƒ±!`)

            logChannel.send({ embeds: [logEmbed] }).catch(e => { })

            return interaction.reply({
                content: "Sistemimize uptime botu ekleyemezsin!",
                ephemeral: true
            }).catch(e => { })
        }


        louritydb.push(`uptimeLinks_${interaction.user.id}`, link)
        louritydb.push(`uptimeLinks`, link)
        interaction.reply({
            content: "Linkin ba≈üarƒ±yla uptime sistemime eklendi!",
            ephemeral: true
        }).catch(e => { })

        const logEmbed = new EmbedBuilder()
            .setColor("Yellow")
            .setDescription(` <@${interaction.user.id}> adlƒ± kullanƒ±cƒ± sisteme bir link ekledi!\n\n *Kullanƒ±cƒ± ID* \n\n ${interaction.user.id} \n\n ***Bizi tercih ettiƒüiniz i√ßin te≈üekk√ºr ederiz :)***`)

       logChannel.send({ embeds: [logEmbed] }).catch(e => { })

      client.on('guildCreate', () => {

  botCount++;

  updatePresence();

});


    }
})


// Uptime Sil
client.on('interactionCreate', async interaction => {
    if (interaction.customId === "sil") {

        await interaction.showModal(lourityModal2);
    }
})

client.on('interactionCreate', async interaction => {
    if (interaction.type !== InteractionType.ModalSubmit) return;
    if (interaction.customId === 'form2') {

        let sistem = louritydb.get(`uptimeSistemi_${interaction.guild.id}`)
        if (!sistem) return;
        let log = sistem.log
        if (!log) return;
        var logChannel = client.channels.cache.get(log)

        const links = louritydb.get(`uptimeLinks_${interaction.user.id}`)
        let linkInput = interaction.fields.getTextInputValue("baslik1")

        if (!links.includes(linkInput)) return interaction.reply({ content: "Sistemde b√∂yle bir link mevcut deƒüil!", ephemeral: true }).catch(e => { })

        louritydb.unpush(`uptimeLinks_${interaction.user.id}`, linkInput)
        louritydb.unpush(`uptimeLinks`, linkInput)

        interaction.reply({ content: "Linkin ba≈üarƒ±yla sistemden silindi!", ephemeral: true }).catch(e => { })

        const logEmbed = new EmbedBuilder()
            .setColor("Red")
            .setDescription(`<@${interaction.user.id}> adlƒ± kullanƒ±cƒ± sistemden bir **link sildi!**\n\n *Kullanƒ±cƒ± ID* \n\n ${interaction.user.id} \n\n ***Daha doƒürusu √ºz√ºld√ºm :(*** `)

        logChannel.send({ embeds: [logEmbed] }).catch(e => { })

  // botlarƒ±n sayƒ±sƒ±nƒ± g√ºncelle

client.on('guildDelete', () => {

  botCount--;

  updatePresence();

});

  
    }
})

// Linklerim
client.on('interactionCreate', async interaction => {
    if (interaction.customId === "linklerim") {

        const rr = louritydb.get(`uptimeLinks_${interaction.user.id}`)
        if (!rr) return interaction.reply({ content: "Sisteme eklenmi≈ü bir linkin yok!", ephemeral: true })

        const links = louritydb.get(`uptimeLinks_${interaction.user.id}`).map(map => `‚ñ∂Ô∏è \`${map}\` `).join("\n")

        const linklerimEmbed = new EmbedBuilder()
            .setTitle(`Uptime Linklerin`)
            .setDescription(`${links || "Sisteme eklenmi≈ü bir link yok!"}`)
            .setFooter({ text: "POWER Uptime" })
            .setColor("Blurple")

        interaction.reply({
            embeds: [linklerimEmbed],
            ephemeral: true
        }).catch(e => { })

    }
})

client.on("ready", async () => {

    let guild = "1073846789758783549"

    let channel = "1075384932416880652"

    let message = ` ***Botun Pingi*** *_${client.ws.ping}_*`

    setInterval(async() => {

        guild = client.guilds.cache.get(guild)

        if(guild){

            channel = guild.channels.cache.get(channel)

            if(channel){

                channel.send({ content: message }).catch(e => {

                    console.log("Belirtilen Kanala Mesaj Atamƒ±yorum!")

                })

            } else {

                console.log("Belirtilen Kanal Bulunamadƒ±!")

            }

        } else {

            console.log("Belirtilen Sunucu Bulunamadƒ±!")

        }

    }, 6000) //1000 = 1 saniye

})

const allowedServers = ['1073846789758783549']; // komutlarƒ±n kullanƒ±lmasƒ±na izin verilen sunucularƒ±n ID'lerini i√ßeren bir dizi

client.on('interactionCreate', interaction => {

  if (!allowedServers.includes(interaction.guildId)) {

    interaction.reply('Bu komutu kullanmak i√ßin sunucuma gelmelisin!');

    return;

  }

  // buraya komutunuzun ger√ßekle≈ütirilmesi i√ßin gerekli kodlarƒ± ekleyin

});



client.login('MTA3MzcxNjMyMDc5NDg0OTQzMg.GoFEXH.za7k3FD-n2trj2JIylr8w_NPFCuFq9onLARVjY'); // BOT_TOKEN, Discord Developer Portal'dan aldƒ±ƒüƒ±nƒ±z bot token'ƒ±dƒ±r.

client.on('ready', () => {

  console.log(`Ba≈ülƒ±yor...`);

  // Sunucu ID'si

  const guildId = '1073846789758783549';

  const guild = client.guilds.cache.get(guildId);

  if (!guild) {

    console.log(`Sunucu ID'si yanlƒ±≈ü veya bot sunucuda deƒüil.`);

    return;

  }

  // Kanal ID'si

  const channelId = '1076875391723110491';

  const channel = guild.channels.cache.get(channelId);

  if (!channel) {

    console.log(`Kanal ID'si yanlƒ±≈ü veya kanal bulunamadƒ±.`);

    return;

  }

  // Mesaj

  const message = '***Bot Uzun Zamandƒ±r*** _*0*_ ***Hata ile Aktif***';

  // Mesajƒ± g√∂nder

  channel.send(message);

});

client.login('MTA3MzcxNjMyMDc5NDg0OTQzMg.GoFEXH.za7k3FD-n2trj2JIylr8w_NPFCuFq9onLARVjY');

const botCount = 0;

client.on('ready', () => {

  console.log(`BotCount Hazƒ±r`);

  // botun durumunu g√ºncelle

  client.user.setPresence({

    status: 'online',

    activities: [{

      name: `${botCount}/100 Bot Uptime ediliyor`,

      type: 'WATCHING'

    }]

  });

});

// durum g√ºncelleme fonksiyonu

function updatePresence() {

  client.user.setPresence({

    status: 'online',

    activities: [{

      name: `${botCount}/100 Bot Uptime Ediliyor`,

      type: 'WATCHING'

    }]

  });

}

client.login('MTA3MzcxNjMyMDc5NDg0OTQzMg.GoFEXH.za7k3FD-n2trj2JIylr8w_NPFCuFq9onLARVjY');

const { MessageActionRow, MessageButton } = require('discord.js');

// Komutun a√ßƒ±klamasƒ± ve diƒüer √∂zellikleri

module.exports = {

  name: '√∂neri',

  description: 'Bot sahibine √∂neride bulunun',

  // Komut sadece √∂zel mesajlarda √ßalƒ±≈üacak

  guildOnly: false,

  // Slash komutu olarak tanƒ±mlanacak

  slash: true,

  // Komutun i≈ülevi

  async execute(interaction) {

    // Kullanƒ±cƒ±nƒ±n √∂nerisini alƒ±nacak

    const filter = (m) => m.author.id === interaction.user.id;

    await interaction.user.send('L√ºtfen √∂nerinizi girin:');

    const collected = await interaction.user.dmChannel.awaitMessages(filter, { max: 1, time: 60000, errors: ['time'] });

    const suggestion = collected.first().content;

    // Kullanƒ±cƒ±nƒ±n √∂nerisini bot sahibine iletecek

    const owner = await interaction.client.users.fetch('1014980281935073331');

    await owner.send(`**${interaction.user.username}** adlƒ± kullanƒ±cƒ±nƒ±n √∂nerisi: ${suggestion}`);

    // Kullanƒ±cƒ±ya geribildirim verilecek

    await interaction.reply({ content: '√ñneriniz bot sahibine iletilmi≈ütir. Te≈üekk√ºrler!', ephemeral: true });

  },

  // Komutun slash komutuna √∂zel i≈ülevi

  async slashExecute(interaction) {

    // Kullanƒ±cƒ±nƒ±n √∂zel mesajƒ±na d√ºƒüme eklenecek

    const row = new MessageActionRow()

      .addComponents(

        new MessageButton()

          .setCustomId('suggestion')

          .setLabel('√ñneri G√∂nder')

          .setStyle('PRIMARY')

      );

    await interaction.user.send({ content: '√ñnerilerinizi bana √∂zel mesaj yoluyla g√∂nderebilirsiniz.', components: [row] });

  },

  // D√ºƒüme i≈ülevi

  async buttonExecute(interaction) {

    // D√ºƒüme tƒ±klamasƒ± i≈ülencek

    if (interaction.customId === 'suggestion') {

      // Komutun "execute" i≈ülevi √ßaƒürƒ±lacak

      await this.execute(interaction);

    }

  },

};



